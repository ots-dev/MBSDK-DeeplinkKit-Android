package com.daimler.mbdeeplinkkit

import android.content.Context
import com.daimler.mbdeeplinkkit.MBDeepLinkKit.init
import com.daimler.mbdeeplinkkit.common.*
import com.daimler.mbdeeplinkkit.persistence.FamilyAppsCache

/**
 * Service responsible for family apps and deep linking related work.
 * Initialize this service calling [init] with your [DeepLinkServiceConfig].
 *
 * @see FamilyAppsService
 * @see DeepLinkProvider
 * @see IntentService
 */
object MBDeepLinkKit {

    private lateinit var familyAppsService: FamilyAppsService
    private lateinit var deepLinkProvider: DeepLinkProvider
    private lateinit var familyAppsCache: FamilyAppsCache
    private lateinit var intentService: IntentService

    /**
     * Initializes this service. Multiple calls will replace internal used objects with the
     * objects given in the [config].
     */
    fun init(config: DeepLinkServiceConfig) {
        familyAppsService = config.familyAppsService
        deepLinkProvider = config.deepLinkProvider
        familyAppsCache = config.familyAppsCache
        intentService = config.intentService
    }

    /**
     * Returns the [FamilyAppsService].
     */
    fun appService(): FamilyAppsService = familyAppsService

    /**
     * Returns the [DeepLinkProvider].
     */
    fun deepLinkProvider(): DeepLinkProvider = deepLinkProvider

    /**
     * Returns the [IntentService].
     */
    fun intentService(): IntentService = intentService

    /**
     * Same as [openFamilyApp], but uses the [FamilyApp] with the given [id] from the local storage.
     */
    fun openFamilyApp(
        context: Context,
        id: String,
        fallbackTarget: FallbackTarget = FallbackTarget.NONE
    ): DeepLinkOpenResult {
        return intentService.openFamilyApp(context, id, fallbackTarget)
    }

    /**
     * Tries to start an Activity with an Intent generated by the [app].
     *
     * @param context the context used to start the Activity
     * @param app the app to open
     * @param fallbackTarget the fallback if the app could not be opened
     */
    fun openFamilyApp(
        context: Context,
        app: FamilyApp,
        fallbackTarget: FallbackTarget = FallbackTarget.NONE
    ): DeepLinkOpenResult {
        return intentService.openFamilyApp(context, app, fallbackTarget)
    }

    /**
     * Same as [openDeepLink], but uses the [DeepLink] with the given [id] from the local storage.
     */
    fun openDeepLinkById(
        context: Context,
        id: String,
        finOrVin: String? = null,
        fallbackTarget: FallbackTarget = FallbackTarget.NONE
    ): DeepLinkOpenResult {
        return intentService.openDeepLink(context, id, finOrVin, fallbackTarget)
    }

    /**
     * Tries to start an Activity with an Intent generated by the deep link
     * and an optional [finOrVin].
     * If a [finOrVin] is given, the [deepLink] will only be opened if it is
     * eligible for the vehicle.
     *
     * @param context the context used to start the Activity
     * @param deepLink the [DeepLink] to open
     * @param finOrVin optional FIN or VIN of a vehicle
     * @param fallbackTarget the fallback if the [deepLink] link could not be opened
     *
     * @return a result of type [DeepLinkOpenResult]
     */
    fun openDeepLink(
        context: Context,
        deepLink: DeepLink,
        finOrVin: String?,
        fallbackTarget: FallbackTarget = FallbackTarget.NONE
    ): DeepLinkOpenResult {
        return intentService.openDeepLink(context, deepLink, finOrVin, fallbackTarget)
    }

    /**
     * Clears all local cached data.
     */
    fun clearCache() {
        familyAppsCache.clear()
    }
}